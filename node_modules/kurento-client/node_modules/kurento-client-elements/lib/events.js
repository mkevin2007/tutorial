/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the GNU Lesser General Public License (LGPL)
 * version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */


/**
 * Event raised when the stream that the element sends out is finished.
 *
 * @event module:elements#EndOfStream
 */

/**
 * Event fired when a new pair of ICE candidates is used by the ICE library. 
 * This could also happen in the middle of a session, though not likely.
 *
 * @event module:elements#NewCandidatePairSelected
 *
 * @type {module:elements#event:Media}
 *
 * @property {module:elements/complexTypes.IceCandidatePair} candidatePair
 *  The new pair of candidates
 */

/**
 * Event fired when a data channel is closed.
 *
 * @event module:elements#OnDataChannelClosed
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * Event fired when a new data channel is created.
 *
 * @event module:elements#OnDataChannelOpened
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} channelId
 *  The channel identifier
 */

/**
 * Notifies a new local candidate. These candidates should be sent to the remote
 *
 * @event module:elements#OnIceCandidate
 *
 * @type {module:elements#event:Media}
 *
 * @property {module:elements/complexTypes.IceCandidate} candidate
 *  New local candidate
 */

/**
 * Event fired when and ICE component state changes. See 
 * :rom:cls:`IceComponentState` for a list of possible states.
 *
 * @event module:elements#OnIceComponentStateChanged
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:Integer} streamId
 *  The ID of the stream
 * @property {external:Integer} componentId
 *  The ID of the component
 * @property {module:elements/complexTypes.IceComponentState} state
 *  The state of the component
 */

/**
 * Event fired when al ICE candidates have been gathered.
 *
 * @event module:elements#OnIceGatheringDone
 */

/**
 * Fired when encryption is used and any stream reached the soft key usage 
 * limit, which means it will expire soon.
 *
 * @event module:elements#OnKeySoftLimit
 *
 * @type {module:elements#event:Media}
 *
 * @property {external:MediaType} mediaType
 *  The media stream
 */

/**
 * Fired when the recorder goes to pause state
 *
 * @event module:elements#Paused
 */

/**
 * Fired when the recoding effectively starts. ie: Media is received by the 
 * recorder and record method has been called.
 *
 * @event module:elements#Recording
 */

/**
 * Fired when the recorder has been stopped and all the media has been written 
 * to storage.
 *
 * @event module:elements#Stopped
 */
